<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">
    
    <!-- 注解支持  web handler 和 method映射--> 
    <mvc:annotation-driven /> 
    <!-- SpringMVC的扫描范围 -->
    <context:component-scan base-package="com.dyp.spring.shiro" use-default-filters="false">
       <context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>
    
    <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->  
    <mvc:view-controller path="/" view-name="forward:/login.jsp"/>  
    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="prefix">
           <value>/</value>
       </property>
       <property name="suffix">
           <value>.jsp</value>
       </property>
     </bean>
 
    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->  
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->  
    <!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 --> 
    <!-- 或将Web。xml中的<servlet-mapping>解注，把此处的注上 --> 
    <mvc:resources mapping="/js/**" location="/resources/js/"/>  
    <mvc:resources mapping="/css/**" location="/resources/css/"/>  
    <mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/> 
    
    <!-- 支持Shiro对Controller的方法级AOP安全控制 begin -->
    <!-- 放法级的要另加这个，可以看applicationContext.xml -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	   <!-- Spring 错误统一处理 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
      <property name="exceptionMappings">  
         <props>  
             <prop key="org.apache.shiro.authz.UnauthenticatedException">unauthor</prop>
             <prop key="org.apache.shiro.authz.UnauthorizedException">unauthor</prop>
         </props>  
      </property>  
    </bean>  
	<!-- Shiro end -->
</beans>
